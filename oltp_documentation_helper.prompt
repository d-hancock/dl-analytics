# OLTP Database Documentation Helper

## Task Description
You'll be analyzing SQL files for our data analytics project that reference the OLTP database. Your tasks are:

1. Identify the OLTP database schema and table name(s) referenced in the SQL file.
2. Use the search_tables_doc.py script to find the relevant documentation for these tables.
3. Use the documentation to verify column names, data types, and relationships.
4. Provide recommendations for any improvements or issues in the SQL file based on the documentation.

## Instructions

### Step 1: Identify OLTP Schema and Table Names
Analyze the SQL file to identify:
- The OLTP database schema (usually found in FROM clauses after OLTP_DB)
- The table name(s) being referenced
- Any specific columns being used

Example pattern to look for:
```sql
FROM OLTP_DB.[Schema].[TableName]
```

### Step 2: Use the search_tables_doc.py Script
Once you've identified the schema and table name, use the search_tables_doc.py script located in the notes directory to retrieve the table documentation.

Basic usage examples:
```bash
# Get detailed information about a specific table
python /home/dale/development/dl-analytics/notes/search_tables_doc.py --table TableName --schema SchemaName --details

# Search for tables containing specific text
python /home/dale/development/dl-analytics/notes/search_tables_doc.py --contains TableText --details

# Search for a specific column across all tables
python /home/dale/development/dl-analytics/notes/search_tables_doc.py --column ColumnName
```

Additional options:
- `--list-schemas` - List all available schemas
- `--list-tables SchemaName` - List all tables in a specific schema
- `--output filename.txt` - Save results to a file

The script searches through the cleaned_tables.json file which contains comprehensive documentation for the OLTP database tables.

### Step 3: Verify SQL Against Documentation
Using the retrieved documentation:
- Verify that all column names match exactly as they appear in the OLTP schema
- Check that data types are appropriate for the transformations being performed
- Identify any missing or unnecessary columns
- Note any important relationships or constraints

### Step 4: Provide Analysis and Recommendations
Based on your findings:
- Confirm if the SQL is correctly referencing the OLTP schema
- Suggest any modifications to column names or transformations
- Identify any potential missing information that should be included
- Recommend optimizations based on indexes or keys from the documentation

## Example Analysis

Example input SQL:
```sql
SELECT
  Id AS carrier_id,
  CarrierName AS carrier_name,
  CarrierType_Id AS carrier_type_id
FROM OLTP_DB.Insurance.Carrier
WHERE RecStatus = 1
```

Example analysis:
"The SQL references the Insurance.Carrier table. Documentation confirms that all column names (Id, CarrierName, CarrierType_Id, RecStatus) exist and are properly referenced. The RecStatus filter correctly selects only active records as per documentation. The primary key is correctly aliased as carrier_id. Consider adding PayorType_Id which documentation shows is an important classification field."

## Deliverables
1. Identified schema and table names
2. Documentation retrieved from search_tables_doc.py
3. Verification of column names and data types
4. Recommendations for improvements based on the documentation
